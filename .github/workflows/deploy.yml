name: Github Action 실행시켜보기 # Workflow (하나의 단위)

on: # Event (실행 시점 설정 : 어느 시점에 github actions 의 로직을 실행할건지)
  push: # main 브랜치에 push 된 경우
    branches:
      - main

jobs: # 하나의 workflow 는 1개 이상의 job 으로 구성

  My-Deploy-Job: # job 을 식별하기 위한 id
    runs-on: ubuntu-latest # ubuntu 환경

    steps: # 특정 작업을 수행하는 가장 작은 단위 (job 은 여러 step 으로 구성)
      - name: Hello World 찍기
        run: echo "Hello World" # 실제 코드 작성

      - name: 여러 명령어 문장 작성하기
        run: | 
          echo "Good"
          echo "Morning"

      - name: Github Actions 자체에 저장되어 있는 변수 사용 # commmit ID , repo Name 가져오기
        run: |
          echo $GITHUB_SHA 
          echo $GITHUB_REPOSITORY

      - name: 노출되면 안되는 값
        run: |
          echo ${{ secrets.TEST_CICD }}

      # 자동 배포시, 민감한 정보에 대한 처리
      - name: SSH(원격 접속)으로 EC2 접속하기
        uses: appleboy/ssh-action@v1.0.3 # 라이브러리
        env: # 환경 변수 설정
          APPLICATION_PROPERTIES: ${{ secrets.APPLICATION_PROPERTIES }}
        with:
          host: ${{ secrets.EC2_HOST }} # ec2 ip 주소
          username: ${{ secrets.EC2_USERNAME }} # ec2 이름 : ubuntu 기본 값
          key: ${{ secrets.EC2_PRIVATE_KEY }} # key pair 내용 복사
          envs: APPLICATION_PROPERTIES
          script_stop: true
          script: | # 실제 pull 하고 build 하는 과정 작성 (test 제외)
            echo "SSH 연결 성공"
            cd /home/ubuntu/CI-CD-test
            rm -rf src/main/resources/application.yml
            git pull origin main
            echo "$APPLICATION_PROPERTIES" > src/main/resources/application.yml
            sudo ./gradlew clean build -x test
            sudo fuser -k -n tcp 8080 || true
            nohup java -jar build/libs/*SNAPSHOT.jar > ./output.log 2>&1 &

