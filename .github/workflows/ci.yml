# CI (지속적인 통합)
name: CI 테스트 자동화

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
      - develop

permissions: write-all

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      SPRING_PROFILES_ACTIVE: test  # CI에서 H2 DB를 사용하도록 설정

    steps:
      - name: 레포지토리 가져옴
        uses: actions/checkout@v3

      - name: JDK 17 설치
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Gradle Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties', '**/gradle.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Gradle 명령 실행을 위한 권한 부여
        run: chmod +x gradlew

      - name: Gradle build 수행 (테스트 포함)
        run: ./gradlew clean build

      - name: 테스트 결과를 PR에 코멘트로 등록
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()
        with:
          files: "**/build/test-results/test/TEST-*.xml"

      - name: 테스트 실패 시, 실패한 코드 라인에 Check 코멘트 등록
        uses: mikepenz/action-junit-report@v3
        if: always()
        with:
          report_paths: '**/build/test-results/test/TEST-*.xml'
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup Gradle Cache
        if: always()
        run: |
          rm -f ~/.gradle/caches/modules-2/modules-2.lock
          rm -f ~/.gradle/caches/modules-2/gc.properties
